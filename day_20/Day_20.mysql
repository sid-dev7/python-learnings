ðŸ”¹ 1. MySQL Basics
# ðŸ“Œ Create a Database
CREATE DATABASE school;
USE school;

# ðŸ“Œ Create a Table

CREATE TABLE students (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    age INT,
    grade VARCHAR(10)
);

#ðŸ“Œ Insert Data
INSERT INTO students (name, age, grade)
VALUES ('Alice', 14, '8th'), ('Bob', 15, '9th');

#ðŸ“Œ Basic SELECT
SELECT * FROM students;
SELECT name, grade FROM students WHERE age > 14;

ðŸ”¹ 2. Data Manipulation
ðŸ“Œ Update Data
UPDATE students SET grade = '10th' WHERE name = 'Bob';

ðŸ“Œ Delete Data
DELETE FROM students WHERE name = 'Alice';

ðŸ“Œ Use Aliases
SELECT name AS student_name FROM students;

ðŸ”¹ 3. SQL Clauses
ðŸ“Œ WHERE, AND, OR, NOT
SELECT * FROM students WHERE age > 14 AND grade = '10th';

ðŸ“Œ ORDER BY, LIMIT
SELECT * FROM students ORDER BY age DESC LIMIT 2;

ðŸ“Œ LIKE, IN, BETWEEN
SELECT * FROM students WHERE name LIKE 'B%';
SELECT * FROM students WHERE grade IN ('8th', '10th');
SELECT * FROM students WHERE age BETWEEN 13 AND 15;

ðŸ”¹ 4. Functions
ðŸ“Œ COUNT, AVG, SUM, MIN, MAX
SELECT COUNT(*) FROM students;
SELECT AVG(age) FROM students;

ðŸ“Œ GROUP BY + HAVING
SELECT grade, COUNT(*) AS total FROM students GROUP BY grade HAVING COUNT(*) > 1;

ðŸ”¹ 5. JOINs (Multiple Tables)
ðŸ“Œ Create Another Table
CREATE TABLE classes (
    class_id INT AUTO_INCREMENT PRIMARY KEY,
    grade VARCHAR(10),
    teacher VARCHAR(100)
);
INSERT INTO classes (grade, teacher)
VALUES ('8th', 'Mr. Smith'), ('9th', 'Ms. Linda'), ('10th', 'Mr. John');

ðŸ“Œ INNER JOIN
SELECT students.name, students.grade, classes.teacher
FROM students
INNER JOIN classes ON students.grade = classes.grade;

ðŸ“Œ LEFT JOIN / RIGHT JOIN
SELECT s.name, s.grade, c.teacher
FROM students s
LEFT JOIN classes c ON s.grade = c.grade;

ðŸ”¹ 6. Constraints & Keys
ðŸ“Œ UNIQUE, NOT NULL, DEFAULT
CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(100) UNIQUE,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

ðŸ”¹ 7. Subqueries
SELECT name FROM students
WHERE age = (SELECT MAX(age) FROM students);

ðŸ”¹ 8. Views
CREATE VIEW senior_students AS
SELECT * FROM students WHERE age > 14;

SELECT * FROM senior_students;

ðŸ”¹ 9. Stored Procedures
DELIMITER //
CREATE PROCEDURE GetStudents()
BEGIN
   SELECT * FROM students;
END //
DELIMITER ;

CALL GetStudents();

ðŸ”¹ 10. Triggers
CREATE TABLE audit_log (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    action_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    action VARCHAR(255)
);

DELIMITER //
CREATE TRIGGER log_student_deletion
AFTER DELETE ON students
FOR EACH ROW
BEGIN
    INSERT INTO audit_log (action) VALUES (CONCAT('Deleted student: ', OLD.name));
END //
DELIMITER ;

ðŸ”¹ 11. Transactions
START TRANSACTION;
UPDATE students SET age = age + 1 WHERE name = 'Bob';
DELETE FROM students WHERE name = 'John';
COMMIT;
-- Or ROLLBACK;

ðŸ”¹ 12. Indexes & Optimization
CREATE INDEX idx_name ON students(name);

ðŸ”¹ 13. Export/Import Data
# Export a database
mysqldump -u root -p school > school_backup.sql

# Import a database
mysql -u root -p school < school_backup.sql






